{
	"include": [
		"./src",
		"./app"
	],
	"references": [
		{
			"path": "./tsconfig.node.json"
		}
	],
	"exclude": [
		"node_modules"
	],
	"compilerOptions": {
		"paths": {
			"~/*": [
				"src/*"
			]
		},
		"lib": [
			"dom",
			"dom.iterable",
			"esnext"
		],
		"jsx": "react-jsx",
		"baseUrl": ".",
		"types": [
			"vite/client",
			"node",
			"react",
			"vitest/globals",
			"@testing-library/jest-dom"
		],
		// match output dir to input dir. e.g. dist/index instead of dist/app/index
		//    "rootDir": ".",
		"target": "esnext",
		"module": "esnext",
		// interop between ESM and CJS modules. Recommended by TS
		"esModuleInterop": true,
		"allowJs": false,
		// significant perf increase by skipping checking .d.ts files, particularly those in node_modules. Recommended by TS
		"skipLibCheck": true,
		"importHelpers": false,
		"useDefineForClassFields": true,
		"experimentalDecorators": true,
		// output .d.ts declaration files for consumers
		"declaration": true,
		//    "declarationMap": true,
		// output .js.map sourcemap files for consumers
		//		"sourceMap": true,
		// stricter type-checking for stronger correctness. Recommended by TS
		"strict": true,
		"strictNullChecks": true,
		// linter checks for common issues
		"noImplicitReturns": true,
		"noFallthroughCasesInSwitch": true,
		// noUnused* overlap with @typescript-eslint/no-unused-vars, can disable if duplicative
		"noUnusedLocals": true,
		"noUnusedParameters": true,
		// use Node's module resolution algorithm, instead of the legacy TS one
		"moduleResolution": "node",
		"allowSyntheticDefaultImports": true,
		// error out if import and file system have a casing mismatch. Recommended by TS
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true,
		"isolatedModules": true,
		"noEmit": true
	}
}
